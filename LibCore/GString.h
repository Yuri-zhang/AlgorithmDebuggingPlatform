#ifndef lstring_h
#define lstring_h
#include <string>
#include <vector>
#include <set>
#include <xstring>
/*****************************************************************************
* @author : xiaoteng
* @date : 2020/12/1 14:52
* @last change : 
* @description : 
基于std::string 实现了一些常用的操作
*****************************************************************************/

class GString
{
public:
	/*****************************************************************************
	@description : corestring构造
	@param: 	
	@retrun:  
	*****************************************************************************/
	GString();
	GString(std::string strdata);
	GString(std::wstring strdata);
	GString(char *data);
	GString(const char *data);
	GString(unsigned char *data);
	GString(int data);
	GString(double data);
	GString(double data,int count);
	GString(unsigned long long data);
	GString(long long data);

	/*****************************************************************************
	@description : corestring析构
	@param: 	
	@retrun:  
	*****************************************************************************/
	~GString();

protected:
	std::string stringdata_;
public:
	/*****************************************************************************
	@description : corestring转std::string
	@param: 	
	@retrun:  
		std::string 字符串
	*****************************************************************************/
	std::string ToStdString() const;


	/*****************************************************************************
	@description : corestring转char 字符串
	@param: 	
	@retrun:  
		char字符串
	*****************************************************************************/
	const char* ToChar() const;
	
	   	 
	/*****************************************************************************
	@description : 字符串转化为int数据
	@param:
		type:数据形式
	@retrun:
		>=0 success, <0 failed
	*****************************************************************************/
	int ToInt() const;

	/*****************************************************************************
	@description : 字符串转化为double数据
	@param:
		type:数据形式
	@retrun:
		>=0 success, <0 failed
	*****************************************************************************/
	double ToDouble() const;


	/*****************************************************************************
	@description : 字符串个数
	@param: 	
	@retrun:  
		>=0 success, <0 failed
	*****************************************************************************/
	int Size() const;


	/*****************************************************************************
	@description : 返回指定位置的字符
	@param: 	
		begin开始位置
		end:结束位置
	@retrun:  
		>=0 success, <0 failed
	*****************************************************************************/
	GString Sub(int begin, int end) const;
	
	
	/*****************************************************************************
	@description : 去除左边空格
	@param: 	
	@retrun:  
		左边去除空格后的字符串
	*****************************************************************************/
	GString TrimLeft()const;

	/*****************************************************************************
	@description : 去除右边空格
	@param:
	@retrun:
		去除空格后的字符串
	*****************************************************************************/
	GString TrimRight() const;


	/*****************************************************************************
	@description : 去除字符串中的空格
	@param:
	@retrun:
		去除空格后的字符串
	*****************************************************************************/
	GString Trim() const;


	/*****************************************************************************
	@description : 找到子字符串位置
	@param: 	
		substring：子字符串
	@retrun:  
		>=0 子字符串所在位置
		<0 failed
	*****************************************************************************/
	int Find(const char *substring)const;


	/*****************************************************************************
	@description : 字符串是否为空
	@param: 	
	@retrun:  
		ture:为空
		false：不为空
	*****************************************************************************/
	bool IsEmpty() const;

	/*****************************************************************************
	@description : 字符串替换
	@param: 	
	@retrun:  
		>=0 success, <0 failed
	*****************************************************************************/
	GString Replace(const char *oldreplace, const char *newreplace);
	   	 
	
	/*****************************************************************************
	@description : 赋值
	@param: 	
	@retrun:  
		>=0 success, <0 failed
	*****************************************************************************/
	GString operator=(const GString &srcstring);


	/*****************************************************************************
	@description : 两个字符串拼接
	@param: 	
	@retrun:  
		>=0 success, <0 failed
	*****************************************************************************/
	GString operator+(const GString& combinestring)const;


	/*****************************************************************************
	@description : 将当前字符串复制times次
	@param:
		times:次数
	@retrun:
		>=0 success, <0 failed
	*****************************************************************************/
	GString operator*(int times) const;


	/*****************************************************************************
	@description : 判断两个字符是否相等
	@param: 	
	@retrun:  
		>=0 success, <0 failed
	*****************************************************************************/
	bool operator==(const GString &other) const;
		
	/*****************************************************************************
	@description : 将字符串转为宽字符
	@param: 	
	@retrun:  
	*****************************************************************************/
	std::wstring toWString();

	/*****************************************************************************
	@description :使用utf8字符串初始化,暂不支持超出max_path长度的字符 
	@param: 	
	@retrun:  
		>=0 success, <0 failed
	*****************************************************************************/
	int FromUtf8(const char* szU8);


	/*****************************************************************************
	@description : 将字符串转为utf8字符串,暂不支持超出max_path长度的字符 
	@param: 	
	@retrun:  
	*****************************************************************************/
	std::string ToUtf8();


	/*****************************************************************************
	@description :使用base64初始化字符串
	@param:
	@retrun:
	*****************************************************************************/
	std::string FromBase64(const char*data, int datalength);

	/*****************************************************************************
	@description : 将字符串按照base64的形式输出
	@param: 	
	@retrun:  
	*****************************************************************************/
	int ToBase64(std::string &output);
	

	/*****************************************************************************
	@description : 分离字符串
	@param: 	
	@retrun:  
	*****************************************************************************/
	std::vector<std::string> Split(const std::string delim = ",");
	std::vector<int> SplitInt(const std::string delim = ",");
	std::vector<double> SplitDouble(const std::string delim = ",");
	std::set<std::string> SplitSet(const std::string delim = ",");


	/************************************************************************/
	/* 从文件路径中获取文件名
	strFilePath:文件路径
	bIncludeEx： 是否包含后缀
	*/
	/************************************************************************/
	static std::string  GetFileNameFromPath(std::string strFilePath, bool bIncludeEx = true);
	static std::string  GetFileNamExt(std::string strFilePath);

	/************************************************************************/
	/* 获取文件夹目录                                                                     */
	/************************************************************************/
	static std::string GetFileFolderPath(std::string strFilePath);

	/************************************************************************/
	/* 获取文件的扩展名                                                                     */
	/************************************************************************/
	static std::string GetFileExtType(std::string strFilePath);

	/*****************************************************************************
	@description : 去除windows创建文件名非法字符
	@param: 	
	@retrun:  
	*****************************************************************************/
	std::string RemoveIllegalCharater();
};


#endif